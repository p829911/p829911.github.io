{"meta":{"title":"data science study blog","subtitle":"DS Study Blog","description":null,"author":"Seungwoo Hyun","url":"https://p829911.github.io"},"pages":[],"posts":[{"title":"스케일링과 변수 변환","slug":"스케일링과-변수-변환","date":"2018-11-27T08:45:45.000Z","updated":"2018-11-27T09:03:10.616Z","comments":true,"path":"2018/11/27/스케일링과-변수-변환/","link":"","permalink":"https://p829911.github.io/2018/11/27/스케일링과-변수-변환/","excerpt":"","text":"회귀분석에 사용되는 데이터는 그 자체로 사용하기 보다는 스케일링이나 함수 변환 등의 전처리 과정을 거치는 경우가 많다. 전처리 과정은 공분산 행렬의 조건을 향상시키거나 데이터 간의 관계를 선형 모형에 맞게 바꾸기 위해 사용된다. 조건수조건수(condition number)는 공분산 행렬 $X^TX$ 의 가장 큰 고유치와 가장 작은 고유치의 비율을 뜻한다. \\text{condition number} = \\dfrac{\\lambda_{\\text{max}}}{\\lambda_{\\text{min}}}조건수가 크면 역행렬을 계산할 때 오차가 미치는 영향이 커진다. 여기에서는 다음 연립방정식을 예로 들어 설명한다. Ax = b조건수가 작은 경우행렬 $A$가 단위 행렬이면 조건수는 가장 작은 경우로 조건수의 값이 1이다.","categories":[{"name":"Math","slug":"Math","permalink":"https://p829911.github.io/categories/Math/"}],"tags":[{"name":"Math","slug":"Math","permalink":"https://p829911.github.io/tags/Math/"}]},{"title":"ubuntu permission","slug":"ubuntu-permission","date":"2018-11-27T08:44:04.000Z","updated":"2018-11-27T08:45:05.793Z","comments":true,"path":"2018/11/27/ubuntu-permission/","link":"","permalink":"https://p829911.github.io/2018/11/27/ubuntu-permission/","excerpt":"","text":"","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://p829911.github.io/categories/Ubuntu/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://p829911.github.io/tags/Ubuntu/"}]},{"title":"ubuntu apt 명령어","slug":"ubuntu-apt-명령어","date":"2018-11-27T07:50:51.000Z","updated":"2018-11-27T08:05:17.038Z","comments":true,"path":"2018/11/27/ubuntu-apt-명령어/","link":"","permalink":"https://p829911.github.io/2018/11/27/ubuntu-apt-명령어/","excerpt":"","text":"우분투에서 패키지를 관리하는 명령어가 몇 가지 있다. 그 중 apt-get과 apt-cache를 결합한 apt에 관한 명령어를 알아보겠다. 패키지 목록 갱신 1apt update 모든 패키지를 최신 버전으로 업그레이드 12apt install upgradeapt full-upgrade # 의존성 고려한 패키지 업그레이드 패키지 설치 1apt install package_name 패키지 삭제 1apt remove package_name 패키지 삭제(설정 파일 포함) 1apt purge package_name 불필요한 패키지 제거 1apt autoremove 패키지 검색 1apt search package_name 패키지 상세 정보 출력 1apt show package_name apt 명령어 사용법 &amp; 옵션 1apt -h 패키지 리스트 출력 1apt list 권한 문제가 발생할 경우 sudo 명령을 붙여 root로 실행할 수 있다.","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://p829911.github.io/categories/Ubuntu/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://p829911.github.io/tags/Ubuntu/"}]},{"title":"교차 검증","slug":"교차-검증","date":"2018-11-27T06:32:01.000Z","updated":"2018-11-27T07:47:37.702Z","comments":true,"path":"2018/11/27/교차-검증/","link":"","permalink":"https://p829911.github.io/2018/11/27/교차-검증/","excerpt":"","text":"이 포스트는 fastcampus에서 강의를 하고 계시는 김도형 박사님의 강의록을 따라 쓰며 연습한 포스트입니다. 데이터 사이언스 스쿨 표본 내 성능과 표본 외 성능회귀분석 모형을 만들기 위해서는 모수 추정 즉 학습을 위한 데이터 집합이 필요하다. 보통 회귀분석 성능을 이야기할 때는 이 학습 데이터 집합의 종속 변수값을 얼마나 잘 예측하였는지를 결정 계수(codefficient of determination) 등을 이용하여 따진다. 이러한 성능을 표본 내 성능 검증(in-sample testing)이라고 한다. 그런데 회귀분석 모형을 만드는 목적 중 하나는 종속 변수의 값을 아직 알지 못하고 따라서 학습에 사용하지 않은 표본에 대해 종속 변수의 값을 알아내고자 하는 것 즉 예측(prediction)이다. 이렇게 학습에 쓰이지 않는 표본 데이터 집합의 종속 변수 값을 얼마나 잘 예측하는가를 검사하는 것을 표본 외 성능 검증(out-of-sample testing) 혹은 교차 검증(cross validation)이라고 한다. 과최적화일반적으로 표본 내 성능과 표본 외 성능은 비슷한 수준을 보이지만 경우에 따라서는 표본 내 성능은 좋으면서 표본 외 성능이 상대적으로 많이 떨어지는 수도 있다. 이러한 경우를 과최적화(overfitting)라고 한다. 과최적화가 발생하면 학습에 쓰였던 표본 데이터에 대해서는 종속변수의 값을 잘 추정하지만 새로운 데이터를 주었을 때 전혀 예측하지 못하기 때문에 예측 목적으로는 쓸모없는 모형이 된다. 검증용 데이터 집합교차 검증을 하려면 두 종류의 데이터 집합이 필요하다. 모형 추정 즉 학습을 위한 데이터 집합 (training data set) 성능 검증을 위한 데이터 집합 (test data set) 두 데이터 집합 모두 종속 변수값이 있어야 한다. 따라서 보통은 가지고 있는 데이터 집합을 학습용과 검증용으로 나누어 학습용 데이터만을 사용하여 회귀분석 모형을 만들고 검증용 데이터로 성능을 계산하는 학습/검증 데이터 분리(train-test split) 방법을 사용한다. statsmodels 패키지에서의 교차 검증사실 소수의 입력 변수와 소규모 데이터를 사용하는 전통적인 회귀분석에서는 다항 회귀 등의 방법으로 모형 차수를 증가시키지 않는 한 과최적화가 잘 발생하지 않는다. 따라서 statsmodels 패키지에는 교차 검증을 위한 기능이 별도로 준비되어 있지 않고 사용자가 직접 코드를 작성해야 한다. scikit-learn의 교차 검증 기능독립 변수의 개수가 많은 빅데이터에서는 과최적화가 쉽게 발생한다. 따라서 scikit-learn 의 model_selection 서브 패키지는 교차 검증을 위한 다양한 명령을 제공한다. 단순 데이터 분리train_test_split 명령은 데이터를 학습용 데이터와 검증용 데이터로 분리한다. 1train_test_split(data, data2, test_size, train_size, random_state) data: 독립 변수 데이터 배열 또는 pandas 데이터 프레임 data2: 종속 변수 데이터. data인수에 종속 변수 데이터가 같이 있으면 생략할 수 있다. test_size: 검증용 데이터 개수. 1보다 작은 실수이면 비율을 나타낸다. train_size: 학습용 데이터의 개수. 1보다 작은 실수이면 비율을 나타낸다. test_size와 train_size중 하나만 있어도 된다. random_state: 난수 시드 1234from sklearn.model_selection import train_test_splitdf_train, df_test = train_test_split(df, test_size=0.3, random_state=0)df_train.shape, df_test.shape 12dfx_train, dfx_test, dfy_train, dfy_test = train_test_split(dfx, dfy, test_size=0.3, random_state=0)dfx_train.shape, dfy_train.shape, dfx_test.shape, dfy_test.shape K- 폴드 교차 검증데이터의 수가 적은 경우에는 이 데이터 중의 일부인 검증 데이터의 수도 적기 때문에 검증 성능의 신뢰도가 떨어진다. 그렇다고 검증 데이터의 수를 증가시키면 학습용 데이터의 수가 적어지므로 정상적인 학습이 되지 않는다. 이러한 딜레마를 해결하기 위한 검증 방법이 K-폴드(K-fold) 교차 검증 방법이다. K-폴드 교차 검증에서는 전체 데이터를 K개의 부분집합($\\{1, 2, \\cdots , K\\}$)로 나눈 뒤 다음과 같이 학습과 검증을 반복한다. 데이터 $\\{1, 2, \\cdots, K - 1\\}$를 학습용 데이터로 사용하여 회귀분석 모형을 만들고 데이터 $\\{K\\}$ 로 교차 검증을 한다. 데이터 $\\{1, 2, \\cdots, K - 2, K\\}$를 학습용 데이터로 사용하여 회귀분석 모형을 만들고 데이터 $\\{K-1\\}$로 교차 검증을 한다. $\\vdots$ 데이터 $\\{2, \\cdots, K\\}$를 학습용 데이터로 사용하여 회귀분석 모형을 만들고 데이터 $\\{1\\}$로 교차 검증을 한다. 이렇게 하면 총 K개의 모형과 K개의 교차 검증 성능이 나온다. 이 K개의 교차 검증 성능을 평균하여 최종 교차 검증 성능을 계산한다. scikit-learn 패키지의 model_selection 서브 패키지는 KFold 클래스를 비롯한 다양한 교차 검증 생성기를 제공한다. 이 생성기의 split 메서드는 학습용과 검증용의 데이터 인덱스를 출력하는 파이썬 반복자(iterator)를 반환한다. 123456789101112131415161718from sklearn.model_selection import KFoldscores = np.zeros(5)cv = KFold(5, shuffle=True, random_state=0)for i, (idx_train, idx_test) in enumerate(cv.split(df)): df_train = df.iloc[idx_train] df_test = df.iloc[idx_test] model = sm.OLS.from_formula(\"MEDV ~ \" + \"+\".join(boston.feature_names), data=df_train) result = model.fit() pred = result.predict(df_test) rss = ((df_test.MEDV - pred) ** 2).sum() tss = ((df_test.MEDV - df_test.MEDV.mean()) ** 2).sum() rsquared = 1 - rss/tss scores[i] = rsquared print(\"train R2 = &#123;:.8f&#125;, test R2 = &#123;:.8f&#125;\".format(result.rsquared, rsquared))","categories":[{"name":"Math","slug":"Math","permalink":"https://p829911.github.io/categories/Math/"}],"tags":[{"name":"Math","slug":"Math","permalink":"https://p829911.github.io/tags/Math/"}]},{"title":"hexo mathjax","slug":"hexo-mathjax","date":"2018-11-26T14:36:53.000Z","updated":"2018-11-26T14:53:50.702Z","comments":true,"path":"2018/11/26/hexo-mathjax/","link":"","permalink":"https://p829911.github.io/2018/11/26/hexo-mathjax/","excerpt":"","text":"rendering engine changeHexo의 기본 renderer인 hexo-renderer-marked는 mathjax 문법을 지원하지 않는다. 따라서 mathjax를 지원하는 rendering engine으로 교체해준다. 12npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save &lt;blog dir&gt;/node_modules/hexo-renderer-kramed/lib/renderer.js를 열어 return값을 text로 수정한다. 12345function formatText(text) &#123; // Fit kramed's rule: $$ + \\1 + $$ // return text.replace(/`\\$(.*?)\\$`/g, '$$$$$1$$$$'); return text;&#125; install mathjaxmathjax plugin 설치 1npm install hexo-renderer-mathjax --save &lt;blog dir&gt;/node_modules/hexo-renderer-kramed/node_modules/hexo-renderer-mathjax/mathjax.html 을 열고 URL을 수정해준다. 12&lt;!-- &lt;script src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"&gt;&lt;/script&gt; --&gt;&lt;script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML'&gt;&lt;/script&gt; LaTex와 markdown 문법 충돌 해결하기&lt;blog dir&gt;/node_modules/kramed/lib/rules/inline.js를 열고 다음과 같이 수정한다. 12escape: /^\\\\([`*\\[\\]()#$+\\-.!_&gt;])/,em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, Mathjax 사용하기사용하고 있는 theme의 _config.yml파일을 열고 다음과 같이 수정한다. 12mathjax: enable: true markdown post 작성post 작성시 header 부분에 mathjax: true를 넣어주면 블로그에서 수식이 보이게 된다.","categories":[{"name":"Git","slug":"Git","permalink":"https://p829911.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://p829911.github.io/tags/Git/"},{"name":"Blog","slug":"Blog","permalink":"https://p829911.github.io/tags/Blog/"},{"name":"Mathjax","slug":"Mathjax","permalink":"https://p829911.github.io/tags/Mathjax/"}]},{"title":"분산 분석","slug":"분산-분석","date":"2018-11-26T14:21:57.000Z","updated":"2018-11-27T06:16:41.472Z","comments":true,"path":"2018/11/26/분산-분석/","link":"","permalink":"https://p829911.github.io/2018/11/26/분산-분석/","excerpt":"","text":"이 포스트는 fastcampus에서 강의를 하고 계시는 김도형 박사님의 강의록을 따라 쓰며 연습한 포스트입니다. 데이터 사이언스 스쿨 선형회귀분석의 결과가 얼마나 좋은지는 단순히 잔차제곱합(RSS: Residual sum of square)으로 평가할 수 없다. 변수의 단위 즉, 스케일이 달라지면 회귀분석과 상관없이 잔차제곱합도 달라지기 때문이다. 분산 분석(ANOVA: Analysis of Variance)은 종속변수의 분산과 독립변수의 분산간의 관계를 사용하여 선형회귀분석의 성능을 평가하고자 하는 방법이다. 분산 분석은 서로 다른 두 개의 선형회귀분석의 성능 비교에 응용할 수 있으며 독립변수가 카테고리 변수인 경우 각 카테고리 값에 따른 영향을 정량적으로 분석하는데도 사용된다. $\\hat{y}$를 종속변수 $y$의 샘플 평균이라고 하자. \\hat{y} = \\frac{1}{N} \\sum_{i=1}^N y_iTSS (total sum of squares) \\text{TSS} = \\sum_{i=1}^N (y_i-\\hat{y})^2 = (y-\\hat{y})^T(y-\\hat{y})종속변수값의 움직임의 범위를 나타낸다. ESS(explained sum of squares) \\text{ESS} = \\sum_{i=1}^N (\\hat{y_i}-\\bar{\\hat{y}})^2 = (\\hat{y}-\\bar{\\hat{y}})^T(\\hat{y}-\\bar{\\hat{y}})회귀 분석에 의해 예측한 값 $\\hat{y}$의 분산을 나타낸다. 모형에서 나온 예측값의 움직임의 범위를 뜻한다. RSS (residual sum of squares) \\text{RSS} = \\sum_{i=1}^N(y_i-\\hat{y_i})^2 = e^Te잔차 $e$의 분산을 나타낸다. 잔차의 움직임의 범위, 즉 오차의 크기를 뜻한다. 만약 회귀모형이 상수항을 포함하여 올바르게 정의되었다면 잔차의 평균이 0이 된다. 즉 종속변수의 평균과 모형 예측값의 평균이 같아진다. \\bar{e} = \\bar{y} - \\bar{\\hat{y}} = 0 \\bar{y} = \\bar{\\hat{y}}그리고 이 분산값들 간에는 다음과 같은 관계가 성립한다. \\text{TSS} = \\text{ESS} + \\text{RSS}위 식이 말하는 바는 다음과 같다. 모형 예측치의 움직임의 크기(분산)은 종속변수의 움직임의 크기(분산)보다 클 수 없다. 모형의 성능이 좋을 수록 모형 예측치의 움직임의 크기는 종속변수의 움직임의 크기와 비슷해진다. example 123456789101112import numpyimport pandasfrom sklearn.datasets import make_regressionx0, y, coef = make_regression(n_samples=100, n_features=1, noise=30, coef=True, random_state=0)dfx0 = pd.DataFrame(x0, columns=[\"X\"])dfx = sm.add_constant(dfx0)dfy = pd.DataFrame(y, columns=[\"Y\"])df = pd.concat([dfx, dfy], axis=1)model = sm.OLS.from_formula(\"Y ~ X\", data=df)result = model.fit() 12345print(\"TSS = \", result.uncentered_tss)print(\"ESS = \", result.mse_model)print(\"RSS = \", result.ssr)print(\"ESS + RSS = \", result.mse_model + result.ssr)print(\"R squared = \", result.rsquared) 결정 계수(Coefficient of Determination) 위의 분산 관계식에서 모형의 성능을 나타내는 결정계수(Coefficient of Determination) $R^2$를 정의할 수 있다. R^2 \\equiv 1- \\dfrac{\\text{RSS}}{\\text{TSS}} = \\dfrac{\\text{ESS}}{\\text{TSS}}분산 관계식과 모든 분산값이 0보다 크다는 점을 이용하면 $R^2$의 값은 다음과 같은 조건을 만족한다. 0 \\leq R^2 \\leq 1여기에서 $R^2$가 0 이라는 것은 오차의 분산 RSS가 최대이고 회귀분석 예측값의 분산 ESS가 0인 경우이므로 회귀분석 결과가 아무런 의미가 없다는 뜻이다. 반대로 $R^2$가 1이라는 것은 오차의 분산 RSS가 0이고 회귀분석 예측의 분산 ESS가 TSS와 같은 경우이므로 회귀분석 결과가 완벽하다는 뜻이다. 따라서 결정계수값은 회귀분석의 성능을 나타내는 수치라고 할 수 있다. 분산 분석표 분산 분석의 결과는 보통 다음과 같은 분산 분석표를 사용하여 표시한다. 아래의 표에서 $N$은 데이터의 갯수, $K$는 모수의 갯수를 뜻한다. source degree of freedom sum of square mean square F test-statistics p-value Regression $K -1$ $\\text{ESS}$ $s_\\hat{y}^2 = \\dfrac{\\text{ESS}}{K-1}$ $F = \\dfrac{s_\\hat{y}^2}{s_e^2}$ p-value Residual $N - K$ $\\text{RSS}$ $s_e^2 = \\dfrac{\\text{RSS}}{N-K}$ Total $N - 1$ $\\text{TSS}$ $s_y^2 = \\dfrac{\\text{TSS}}{N-1}$ $R^2$ $\\dfrac{\\text{ESS}}{\\text{TSS}}$ 결정 계수와 상관 계수 $y$와 $\\hat{y}$의 샘플 상관계수 $r$의 제곱은 결정 계수 $R^2$와 같다. 상수항이 없는 모형의 경우 모형에서 상수항을 지정하지 않은 경우에는 결정계수의 정의에 사용되는 TSS의 정의가 다음과 같이 달라진다. \\text{TSS} = \\sum_{i=1}^{N}y_i^2 = y^Ty즉, 실제 샘플평균과 상관없이 $\\bar{y} = 0$ 이라는 가정하에 TSS를 계산한다. 이렇게 정의하지 않으면 TSS = RSS + ESS 관계식이 성립하지 않아서 결정계수의 값이 1보다 커지게 된다. 따라서 모형의 결정계수를 비교할 때 상수항이 없는 모형과 상수항이 있는 모형은 직접 비교하면 안된다. F 검정을 이용한 모형 비교 F 검정을 이용하면 다음과 같이 포함관계에 있는 두 모형의 성능을 비교할 수 있다. 전체 모형(Full Model): y = w_0 + w_1x_1 + w_2x_2 + w_3x_3 축소 모형(Reduced Model): y = w_0 + w_1x_1 다음과 같은 귀무가설을 검정하는 것은 위의 두 모형이 실질적으로 같은 모형이라는 가설을 검정하는 것과 같다. H_0 : w_2 = w_3 = 0이 검정도 F검정을 사용하여 할 수 있다. StatsModels에서는 anova_lm명령에 두 모형의 result 객체를 인수로 넣어주면 이러한 검정을 할 수 있다. 인수를 넣어줄 때는 축소 모형(reduced model), 전체 모형(full model)의 순서로 넣어준다.","categories":[{"name":"Math","slug":"Math","permalink":"https://p829911.github.io/categories/Math/"}],"tags":[{"name":"Math","slug":"Math","permalink":"https://p829911.github.io/tags/Math/"}]},{"title":"Jupyber notebook matplotlib 한글 설정","slug":"Jupyber-notebook-matplotlib-한글-설정","date":"2018-11-26T13:25:40.000Z","updated":"2018-11-26T14:52:32.944Z","comments":true,"path":"2018/11/26/Jupyber-notebook-matplotlib-한글-설정/","link":"","permalink":"https://p829911.github.io/2018/11/26/Jupyber-notebook-matplotlib-한글-설정/","excerpt":"","text":"우분투 폰트 경로 /usr/share/fonts/ 나눔 글꼴 또는 다른 폰트도 /usr/share/fonts/ 폴더에 복사에서 사용가능하다. 나눔글꼴 설치 12sudo apt-get install fonts-nanum*sudo fc-cache -fv apt-get 명령으로 나눔글꼴 설치 후, fc-cache 명령으로 폰트 캐시 삭제 다른 ttf 폰트 12sudo cp new_font.ttf / usr/share/fontssudo fc-cache -fv 우분투 폰트 경로로 ttf폰트 복사 후, fc-cache 명령으로 폰트 캐시 삭제 matplotlib 폴더에 글꼴 추가 123sudo cp /usr/share/fonts/truetype/D2Coding/D2* /home/p829911/.local/lib/python3.6/site-packages/matplotlib/mpl-data/rm -rf /home/ubuntu/.cache/matplotlib/* matplotlib 폴더에 글꼴을 복사 한 후 matplotlib의 폰트 캐시를 삭제 12# 캐쉬 디렉토리matplotlib.get_cachedir() 내 컴퓨터에 저장되어 있는 폰트 리스트 가져오기 123456789import matplotlib.font_manager as fmfont_list = fm.findSystemFonts(fontpaths=None, fontext='ttf')# 전체개수print(len(font_list)) # 처음 10개만 출력font_list[:10] 사용가능한 시스템의 TTF 폰트 목록 123456import matplotlib.font_manager as fmfont_list = [(f.name, f.fname) for f in fm.fontManager.ttflist]print(len(font_list))font_list[:10] 내가 원하는 D2Coding 폰트의 저장 위치를 불러오기 123for font in font_list: if \"D2\" in font[0]: print(font) rcParams 를 설정 파일에 직접 적어주기 - 모든 노트북에 공통 적용 font.family: D2Coding 이곳에 폰트를 지정해 주면 노트북을 실행 할 때 바로 로드되도록 설정할 수 있다. 1print(matplotlib.matplotlib_fname()) 1vi /home/p829911/.local/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc matplotlibrc파일에서 font.family를 D2Coding으로 설정해준다. 1234567891011import numpy as npimport matplotlib.pyplot as plt%matplotlib inlinedata = np.random.randint(-100, 100, 50).cumsum()dataplt.plot(range(50), data, 'r')plt.title('가격변동 추이')plt.ylabel('가격')plt.show()","categories":[{"name":"Python","slug":"Python","permalink":"https://p829911.github.io/categories/Python/"}],"tags":[{"name":"Jupyter","slug":"Jupyter","permalink":"https://p829911.github.io/tags/Jupyter/"},{"name":"Python","slug":"Python","permalink":"https://p829911.github.io/tags/Python/"}]},{"title":"Jupyter notebook 글꼴 설정","slug":"Jupyter-notebook-글꼴-설정","date":"2018-11-26T10:51:23.000Z","updated":"2018-11-26T14:52:46.876Z","comments":true,"path":"2018/11/26/Jupyter-notebook-글꼴-설정/","link":"","permalink":"https://p829911.github.io/2018/11/26/Jupyter-notebook-글꼴-설정/","excerpt":"","text":"D2Coding 설치 12345cd /home/username/.jupytermkdir customcd customtouch custom.cssvi custom.css 만약 custom.css에 쓰기 권한이 없으면 chmod명령으로 파일 권한을 바꿔준다. 1sudo chmod 777 custom.css vi 편집기로 custom.css 파일을 연 후 다음과 같이 설정 해 준다. 1.CodeMirror pre &#123;font-family: D2Coding; font-size: 12pt; line-height: 120%;&#125; jupyter notebook을 실행하면 글꼴이 D2Coding으로 바뀐 것을 볼 수 있다.","categories":[{"name":"Python","slug":"Python","permalink":"https://p829911.github.io/categories/Python/"}],"tags":[{"name":"Jupyter","slug":"Jupyter","permalink":"https://p829911.github.io/tags/Jupyter/"},{"name":"Python","slug":"Python","permalink":"https://p829911.github.io/tags/Python/"}]},{"title":"git blog 관리하기","slug":"git-blog-관리하기","date":"2018-11-26T10:50:56.000Z","updated":"2018-11-26T14:53:40.091Z","comments":true,"path":"2018/11/26/git-blog-관리하기/","link":"","permalink":"https://p829911.github.io/2018/11/26/git-blog-관리하기/","excerpt":"","text":"새 저장소(repository) 만들기Github에서 새 저장소(repository)를 만든다. 이 때 저장소의 이름을 자신의 username뒤에 .github.io가 붙은 이름으로 만든다. 이렇게 만들어 줘야 username.github.io의 도메인으로 접속할 수 있는 블로그가 된다. Hexo 설치하기git과 node.js는 설치돼 있어야 한다. 12sudo apt install npmnpm install -g hexo-cli # 오류 날 시 앞에 sudo를 붙여준다 1hexo -v 위의 명령어로 hexo가 제대로 설치 되었는지 확인 한다. Hexo 설치가 완료되었으면 다음과 같은 명령어를 입력해서 Hexo 디렉토리를 초기화한다. 1hexo init &lt;디렉토리명&gt; 설치가 모두 잘 되었다면 다음 명령어를 입력해서 내장 서버를 돌릴 수 있다. 1hexo server 브라우저에서 http://0.0.0.0:4000/ 으로 접속해서 확인 할 수 있다. deployHexo가 설치된 디렉토리로 가서 _config.yml 파일을 열어 Site, URL, Deployment 항목을 수정해준다. 그리고 정적 파일을 생성한다. 1hexo generate 디플로이를 하기 위해서는 hexo-deployer-git 플러그인이 필요하다. 아래의 명령어를 사용해서 설치한다. 1npm install --save hexo-deployer-git 생성이 잘 되었다면 디플로이 명령어를 사용한다. 1hexo deploy Hueman 테마 적용하기블로그 루트 폴더에서 명령어로 테마를 받는다. 1git clone https://github.com/ppoffice/hexo-theme-hueman.git themes/hueman blog 폴더에 있는 _config.yml에서 Theme부분을 landscape에서 hueman으로 바꿔준다. themes/hueman 폴더에 있는 _config.yml.example을 _config.yml로 바꾼다. 12cd blog/themes/huemanmv _config.yml.example _config.yml 최신 버전을 다운받기 위해 pull해준다. 12cd themes/huemangit pull Hueman 테마의 Insight Search 검색엔진을 사용하기 위해 npm으로 hexo-generator-json-content을 설치한다. 1npm install -S hexo-generator-json-content hueman의 테마는 hueman폴더 안에 있는 _config.yml에서 설정할 수 있다. 포스트 작성하기1hexo new post [post name] 그러면 [blogFolder]/source/_posts에 새로운 마크다운 파일이 생성된다.자동으로 제목과 생성날짜가 들어간다. 글을 마크다운 파일로 작성 한 후 12hexo generatehexo deploy or 1hexo generate --deploy 테마가 적용 안되는 경우12hexo cleanhexo generate --deploy","categories":[{"name":"Git","slug":"Git","permalink":"https://p829911.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://p829911.github.io/tags/Git/"},{"name":"Blog","slug":"Blog","permalink":"https://p829911.github.io/tags/Blog/"}]},{"title":"우분투 Root 비밀번호 설정","slug":"우분투-Root-비밀번호-설정","date":"2018-11-26T10:46:43.000Z","updated":"2018-11-26T11:07:04.086Z","comments":true,"path":"2018/11/26/우분투-Root-비밀번호-설정/","link":"","permalink":"https://p829911.github.io/2018/11/26/우분투-Root-비밀번호-설정/","excerpt":"","text":"우분투를 설치하면 기본으로 Root 비밀번호가 없는 상태이다. 아래와 같은 방법으로 root 비밀번호를 설정해본다. root 비밀번호 설정 1sudo passwd 위와 같이 비밀번호를 설정 했다면 1su 명령을 통해 root에 로그인 할 수 있다. passwd 1passwd 현재 로그인한 사용자 계정의 비밀번호를 변경할 수 있는 명령어이다. root에서 user 비밀번호 변경 1passwd p829911 root에서 p829911이라는 사용자의 비밀번호를 변경하고 싶을 때 사용하는 명렁어이다.","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://p829911.github.io/categories/Ubuntu/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://p829911.github.io/tags/Ubuntu/"}]},{"title":"우분투 한글 입력기 설치","slug":"우분투-한글-입력기-설치","date":"2018-11-24T18:14:50.000Z","updated":"2018-11-24T18:51:55.876Z","comments":true,"path":"2018/11/25/우분투-한글-입력기-설치/","link":"","permalink":"https://p829911.github.io/2018/11/25/우분투-한글-입력기-설치/","excerpt":"","text":"한글 설치 fcitx-hangul 설치 1sudo apt-get install fcitx-hangul System Setting (설정) &gt; Language Support(언어 지원) 을 실행해서 설치되지 않은 언어팩 모두 설치한다. 키보드 입력기를 ibus에서 fcitx로 변경한다. 재부팅 시 오른쪽 위에 아래의 첫번째에서 보는 것과 같은 아이콘이 생성된 것을 볼 수 있다. 한영 변환 설정 &gt; 장치 &gt; 키보드 로 들어간 뒤 입력 중의 다음 입력소스로 전환, 이전 입력소스로 전환을 사용 않음으로 바꿔준다. 사용 않음으로 바꿔주기 위해선 클릭 후 backspace를 누르면 된다. 상단 메뉴바 오른쪽의 입력기 선택(위 그림에서 세번째) 후 현재 입력기 설정 클릭 Keyboard-English(US)가 있다면 + 를 눌러 Hangul을 추가한다. (uncheck “Only Show Current Language”). Korean이 아닌 Hangul을 선택한다. 전역 설정 &gt; 단축키 &gt; 입력기 전환에 ‘Shift + Space’를 추가한다. 전역 설정 &gt; 프로그램 윈도우 사이에 상태 공유를 ‘모두’로 바꿔준다","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://p829911.github.io/categories/Ubuntu/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://p829911.github.io/tags/Ubuntu/"}]},{"title":"우분투 데이터분석 환경설정","slug":"우분투-데이터분석-환경설정","date":"2018-11-24T17:25:25.000Z","updated":"2018-11-24T18:12:21.696Z","comments":true,"path":"2018/11/25/우분투-데이터분석-환경설정/","link":"","permalink":"https://p829911.github.io/2018/11/25/우분투-데이터분석-환경설정/","excerpt":"","text":"우분투 버전: Ubuntu 18.04.1 LTS 이 글은 데이터 분석을 공부하면서 window 사용자가 우분투에 데이터 분석 환경 설정 하며 겪은 시행착오와 그 단계들을 모아둔 글입니다. 오류와 path충돌 때문에 눈물을 머금고 우분투를 4번 정도 다시 깔면서 다음에 다시 설치해야 할 상황이 왔을 때 참고하기 위한 글이고, 우분투로 처음 데이터 분석 환경 설정을 하려고 하는 분들을 위해 정리하는 글입니다. 이 포스트와 다음과 같은 내용이 포함되어 있습니다. 한글 입력기 설치 root 비밀번호 설정 패키지 관리 툴 apt 사용법 슬랙 설치 vim 설치 git 설치 python3 설치 및 기본 설정 python3 데이터 분석 관련 패키지 설치 markdown 편집기 typora 설치 Atom &amp; Atom package 설치 mysql &amp; mysql workbench 설치 AWS(Amazon Web Services) 가입 및 접속 AWS와 파일 주고 받기를 할 수 있는 FileZilla 설치 및 사용법","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://p829911.github.io/categories/Ubuntu/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://p829911.github.io/tags/Ubuntu/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-11-24T16:29:37.406Z","updated":"2018-11-24T16:29:37.406Z","comments":true,"path":"2018/11/25/hello-world/","link":"","permalink":"https://p829911.github.io/2018/11/25/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}